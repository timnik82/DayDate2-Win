const {
  NativeScriptPreviewWebpackPlugin,
} = require("./dist/NativeScriptPreviewWebpackPlugin");
const path = require("path");

const WebpackBar = require("webpackbar");

/**
 * @param {typeof import("@nativescript/webpack")} webpack
 */
module.exports = (webpack) => {
  // same API as the user configs
  // for example make changes to the internal config with webpack-chain
  webpack.chainWebpack((config, env) => {
    if (env.preview) {
      const platformName = webpack.Utils.platform.getPlatformName();
      config
        .plugin("NativeScriptPreviewWebpackPlugin")
        .use(NativeScriptPreviewWebpackPlugin, [
          {
            platform: platformName,
          },
        ]);

      if (config.plugins.has("ForkTsCheckerWebpackPlugin")) {
        config.plugins.delete("ForkTsCheckerWebpackPlugin");

        if (
          config.module.rules.has("ts") &&
          config.module.rule("ts").uses.has("ts-loader")
        )
          config.module
            .rule("ts")
            .use("ts-loader")
            .tap((options) => {
              if (options && options[0] && "transpileOnly" in options[0]) {
                // make sure we typecheck since we removed the ForkTsChecker...
                options[0].transpileOnly = false;
              }
              return options;
            });
      }

      config.plugin("PreviewWebpackBar").use(WebpackBar, [
        {
          name: `Building for ${webpack.Utils.platform.getPlatformName()}`,
          color: "cyan",
          reporter: {
            done(context, { stats }) {
              if (!context.state.hasErrors) {
                return;
              }

              try {
                process.send({
                  type: "webpack::state",
                  data: {
                    state: "build_error",
                  },
                });
              } catch (err) {
                // ignore
              }

              console.log(
                stats.toString({
                  all: false,
                  colors: true,
                  errorDetails: env.verbose,
                  errors: true,
                  errorsCount: true,
                  logging: "warn",
                  moduleTrace: true,
                  warnings: true,
                  warningsCount: true,
                })
              );
            },
          },
        },
      ]);

      // expose the OpenNative modulemap from our pre-built one shipped in the shell app.
      try {
        if (webpack.Utils.dependencies.hasDependency("@open-native/core")) {
          const moduleMapPath =
            platformName === "ios"
              ? require.resolve(
                  "@open-native/core/platforms/ios/lib_community/modulemap.json"
                )
              : require.resolve(
                  "@open-native/core/react-android/bridge/modulemap.json"
                );

          config.resolve.alias.set(
            moduleMapPath,
            path.resolve(__dirname, "open-native-modulemap.js")
          );
        }
      } catch (err) {
        // open-native is likely not installed/used.
      }

      // fix android assets & fonts handling
      config.module
        .rule("application-path-fix|preview")
        .test(/file\-system\/file-system-access\.android\.js$/)
        .use("application-path-fix-loader")
        .loader(path.resolve(__dirname, "dist/application-path-fix-loader.js"));
    }
  });
};
