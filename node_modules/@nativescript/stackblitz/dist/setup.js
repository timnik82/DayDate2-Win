#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/@webcontainer/env/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/@webcontainer/env/dist/index.js"(exports, module2) {
    var c = Object.defineProperty;
    var g = Object.getOwnPropertyDescriptor;
    var y = Object.getOwnPropertyNames;
    var d = Object.prototype.hasOwnProperty;
    var a = (e, t) => c(e, "name", { value: t, configurable: true });
    var b = (e, t) => {
      for (var o in t)
        c(e, o, { get: t[o], enumerable: true });
    };
    var P = (e, t, o, u) => {
      if (t && typeof t == "object" || typeof t == "function")
        for (let s of y(t))
          !d.call(e, s) && s !== o && c(e, s, { get: () => t[s], enumerable: !(u = g(t, s)) || u.enumerable });
      return e;
    };
    var U = (e) => P(c({}, "__esModule", { value: true }), e);
    var x = {};
    b(x, { HostURL: () => n, isWebContainer: () => h });
    module2.exports = U(x);
    var r;
    try {
      r = require("@blitz/internal/env");
    } catch (e) {
    }
    function h() {
      return r != null && process.versions.webcontainer != null;
    }
    a(h, "isWebContainer");
    function p(e) {
      let t = r == null ? void 0 : r.createServiceHostname(e);
      if (!t)
        throw new Error("Failed to construct service hostname");
      return t;
    }
    a(p, "_createServiceHostname");
    function f(e) {
      return r == null ? void 0 : r.isServiceUrl(e);
    }
    a(f, "_isServiceUrl");
    function l(e) {
      return r == null ? void 0 : r.isLocalhost(e);
    }
    a(l, "_isLocalhost");
    var n = class {
      constructor(t) {
        this._url = t;
        if (this._port = this._url.port, h() && l(this._url.hostname)) {
          let o = p(this._port);
          this._url.host = o, this._port === this._url.port && (this._url.port = "");
        }
      }
      static parse(t) {
        return t = typeof t == "string" ? new URL(t) : t, new n(t);
      }
      get port() {
        return h() ? this._port : this._url.port;
      }
      get hash() {
        return this._url.hash;
      }
      get host() {
        return this._url.host;
      }
      get hostname() {
        return this._url.hostname;
      }
      get href() {
        return this._url.href;
      }
      get origin() {
        return this._url.origin;
      }
      get username() {
        return this._url.username;
      }
      get password() {
        return this._url.password;
      }
      get pathname() {
        return this._url.pathname;
      }
      get protocol() {
        return this._url.protocol;
      }
      get search() {
        return this._url.search;
      }
      get searchParams() {
        return this._url.searchParams;
      }
      update(t) {
        var u;
        let o = h();
        for (let s in t) {
          let i = (u = t[s]) != null ? u : "";
          if (o)
            switch (s) {
              case "port": {
                if (this._port = i, (l(this._url.hostname) || f(this._url.hostname)) && (this._url.host = p(i), this._port !== this._url.port))
                  continue;
                break;
              }
              case "host": {
                let [m, _ = this._port] = i.split(":");
                this._port = _, l(m) && (i = p(_));
                break;
              }
              case "hostname": {
                if (l(i)) {
                  if (/\/|:/.test(i))
                    continue;
                  i = p(this._port);
                } else
                  this._url.port = this._port;
                break;
              }
              case "href": {
                this._url = n.parse(i);
                continue;
              }
            }
          this._url[s] = i;
        }
        return this;
      }
      toString() {
        return this._url.toString();
      }
      toJSON() {
        return this._url.toJSON();
      }
    };
    a(n, "HostURL");
  }
});

// src/setup.ts
var import_env = __toESM(require_dist());
var import_child_process = require("child_process");
var import_path = __toESM(require("path"));
if (!(0, import_env.isWebContainer)()) {
  process.exit();
}
var binPath = import_path.default.resolve(process.cwd(), "node_modules/.bin");
var cliShimPath = import_path.default.resolve(__dirname, "index.js");
(0, import_child_process.exec)(`chmod +x ${cliShimPath}`);
function link(alias, command) {
  (0, import_child_process.exec)(`ln -s ${command} ${binPath}/${alias}`);
}
console.log(
  "Setting up NativeScript aliases: ns, nsc, tns and nativescript..."
);
link("ns", cliShimPath);
link("nsc", cliShimPath);
link("tns", cliShimPath);
link("nativescript", cliShimPath);
console.log("Installing @nativescript/preview-cli@latest");
(0, import_child_process.spawn)(
  "npm",
  [
    "install",
    "@nativescript/preview-cli@latest",
    "--save-dev",
    "--ignore-scripts"
  ],
  {
    stdio: "inherit"
  }
);
console.log("Installing @nativescript/stackblitz@latest");
(0, import_child_process.spawn)(
  "npm",
  [
    "install",
    "@nativescript/stackblitz@latest",
    "--save-dev",
    "--ignore-scripts"
  ],
  {
    stdio: "inherit"
  }
);
/*! Bundled license information:

@webcontainer/env/dist/index.js:
  (**
   * @license Copyright 2022 Stackblitz, Inc. All Rights Reserved.
   * Portions of this software are patent pending in USA and EU jurisdictions.
   * More info available at https://stackblitz.com/terms-of-service.
   *)
*/
//# sourceMappingURL=setup.js.map
