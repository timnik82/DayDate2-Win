"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSingleAnimationShorthand = void 0;
const character_1 = require("./character");
const skip_1 = require("./skip");
const getString_1 = require("./getString");
const getCustomIdent_1 = require("./getCustomIdent");
const fillAnimation_1 = require("./fillAnimation");
const keyword_1 = require("./keyword");
const getNumber_1 = require("./getNumber");
const getCubicBezier_1 = require("./getCubicBezier");
const getSteps_1 = require("./getSteps");
const Error_1 = require("./Error");
const parseSingleAnimationShorthand = (input, startFrom = 0) => {
    const result = {};
    const set = (value, ...keys) => {
        for (const key of keys) {
            if (!(key in result)) {
                result[key] = value;
                return;
            }
        }
        throw new Error_1.$Error('UnexpectedValue', `${value} (${keys.join(', ')})`);
    };
    let index = (0, skip_1.skip)(input, startFrom, character_1.isWhiteSpace);
    const inputLength = input.length;
    const start = index;
    let lastEnd = index;
    while (index < inputLength) {
        index = (0, skip_1.skip)(input, index, character_1.isWhiteSpace);
        const cp = input.codePointAt(index);
        if ((0, character_1.isNumberStart)(cp)) {
            const { value, end } = (0, getNumber_1.getNumber)(input, index);
            index = (0, skip_1.skip)(input, end, character_1.isAlpha);
            const unit = input.slice(end, index).toLowerCase();
            if (unit === 'ms') {
                set(value, 'duration', 'delay');
            }
            else if (unit === 's') {
                set(value * 1000, 'duration', 'delay');
            }
            else if (unit === '') {
                set(value, 'iterationCount');
            }
            else {
                throw new Error_1.$Error('InvalidUnit');
            }
        }
        else if (cp === character_1.DoubleQuote || cp === character_1.SingleQuote) {
            const { value, end } = (0, getString_1.getString)(input, index);
            set(value, 'name');
            index = end;
        }
        else {
            const ident = (0, getCustomIdent_1.getCustomIdentOrNull)(input, index);
            if (ident) {
                const { value, end } = ident;
                index = end;
                if (value === 'infinite') {
                    set(value, 'iterationCount');
                }
                else if (value === 'cubic-bezier') {
                    if (input.codePointAt(end) === character_1.OpenParenthesis) {
                        const result = (0, getCubicBezier_1.getCubicBezier)(input, index);
                        set(result.value, 'timingFunction');
                        index = result.end;
                    }
                    else {
                        set(value, 'name');
                    }
                }
                else if (value === 'steps') {
                    if (input.codePointAt(end) === character_1.OpenParenthesis) {
                        const result = (0, getSteps_1.getSteps)(input, index);
                        set(result.value, 'timingFunction');
                        index = result.end;
                    }
                    else {
                        set(value, 'name');
                    }
                }
                else if (keyword_1.TimingFunctionKeyword.has(value)) {
                    set(value, 'timingFunction', 'name');
                }
                else if (keyword_1.AnimationFillMode.has(value)) {
                    set(value, 'fillMode', 'name');
                }
                else if (keyword_1.AnimationDirection.has(value)) {
                    set(value, 'direction', 'name');
                }
                else if (keyword_1.AnimationPlayState.has(value)) {
                    set(value, 'playState', 'name');
                }
                else {
                    set(value, 'name');
                }
            }
            else {
                break;
            }
        }
        lastEnd = index;
    }
    if (!result.name) {
        if (result.fillMode === 'none') {
            result.name = 'none';
            delete result.fillMode;
        }
        else {
            throw new Error_1.$Error('NoName');
        }
    }
    return {
        start,
        end: lastEnd,
        value: (0, fillAnimation_1.fillAnimation)(result),
    };
};
exports.parseSingleAnimationShorthand = parseSingleAnimationShorthand;
