"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIdentCharacter = exports.isHexCharacter = exports.isNumberStart = exports.isAlpha = exports.isLowerAlpha = exports.isUpperAlpha = exports.isDigit = exports.isWhiteSpace = exports.isNot = exports.isOneOf = exports.isInRange = exports.Underscore = exports.Hyphen = exports.Backslash = exports.Comma = exports.CloseParenthesis = exports.OpenParenthesis = exports.SingleQuote = exports.DoubleQuote = exports.LowerZ = exports.UpperZ = exports.LowerS = exports.UpperS = exports.LowerM = exports.UpperM = exports.LowerF = exports.UpperF = exports.LowerA = exports.UpperA = exports.CR = exports.LF = exports.HTab = exports.Space = exports.Dot = exports.Nine = exports.Zero = void 0;
exports.Zero = 0x30;
exports.Nine = 0x39;
exports.Dot = 0x2E;
exports.Space = 0x20;
exports.HTab = 0x09;
exports.LF = 0x0A;
exports.CR = 0x0D;
exports.UpperA = 0x41;
exports.LowerA = 0x61;
exports.UpperF = 0x46;
exports.LowerF = 0x66;
exports.UpperM = 0x4D;
exports.LowerM = 0x6D;
exports.UpperS = 0x53;
exports.LowerS = 0x73;
exports.UpperZ = 0x5A;
exports.LowerZ = 0x7A;
exports.DoubleQuote = 0x22;
exports.SingleQuote = 0x27;
exports.OpenParenthesis = 0x28;
exports.CloseParenthesis = 0x29;
exports.Comma = 0x2C;
exports.Backslash = 0x5C;
exports.Hyphen = 0x2D;
exports.Underscore = 0x5F;
const isInRange = (cp, min, max) => typeof cp === 'number' && min <= cp && cp <= max;
exports.isInRange = isInRange;
const isOneOf = (...cps) => {
    const set = new Set(cps);
    return (cp) => set.has(cp);
};
exports.isOneOf = isOneOf;
const isNot = (...cps) => {
    const set = new Set(cps);
    return (cp) => !set.has(cp);
};
exports.isNot = isNot;
exports.isWhiteSpace = (0, exports.isOneOf)(exports.Space, exports.HTab, exports.LF, exports.CR);
const isDigit = (cp) => (0, exports.isInRange)(cp, exports.Zero, exports.Nine);
exports.isDigit = isDigit;
const isUpperAlpha = (cp) => (0, exports.isInRange)(cp, exports.UpperA, exports.UpperZ);
exports.isUpperAlpha = isUpperAlpha;
const isLowerAlpha = (cp) => (0, exports.isInRange)(cp, exports.LowerA, exports.LowerZ);
exports.isLowerAlpha = isLowerAlpha;
const isAlpha = (cp) => (0, exports.isUpperAlpha)(cp) || (0, exports.isLowerAlpha)(cp);
exports.isAlpha = isAlpha;
const isNumberStart = (cp) => (0, exports.isDigit)(cp) || cp === exports.Dot || cp === exports.Hyphen;
exports.isNumberStart = isNumberStart;
const isHexCharacter = (cp) => (0, exports.isDigit)(cp) || (0, exports.isInRange)(cp, exports.UpperA, exports.UpperF) || (0, exports.isInRange)(cp, exports.LowerA, exports.LowerF);
exports.isHexCharacter = isHexCharacter;
const isIdentCharacter = (cp) => (0, exports.isDigit)(cp) || (0, exports.isAlpha)(cp) || cp === exports.Hyphen || cp === exports.Underscore;
exports.isIdentCharacter = isIdentCharacter;
